--TODO: at this point just fork typst.vim, then hard-code the generation of the pdf to /tmp/typ/$pdir/$fname

--local function typst_watch_tmp(arg)
--	local input = (arg ~= '' and vim.fn.fnamemodify(arg, ':p')) or vim.api.nvim_buf_get_name(0)
--	if input == '' then return end
--	if vim.fn.executable('typst') == 0 then
--		vim.notify('typst not found in $PATH', vim.log.levels.ERROR)
--		return
--	end
--
--	local root   = vim.fn.fnamemodify(input, ':p:h')
--	local outdir = '/tmp/typ'
--	vim.fn.mkdir(outdir, 'p')
--	local outfile = outdir .. '/' .. vim.fn.fnamemodify(input, ':t:r') .. '.pdf'
--
--	-- Typst expects: typst watch <input> <output>
--	local cmd = { 'typst', 'watch', '--root', root, input, outfile }
--
--	vim.cmd('botright 8split')
--	local term_buf = vim.api.nvim_get_current_buf()
--	vim.fn.termopen(cmd, {
--		on_exit = function(_, code)
--			if code ~= 0 then
--				vim.notify('typst watch exited with code ' .. code, vim.log.levels.ERROR)
--			end
--		end,
--	})
--	vim.bo[term_buf].buflisted = false
--	vim.bo[term_buf].buftype = 'terminal'
--	vim.notify('typst watch â†’ ' .. outfile)
--end
--
--pcall(vim.api.nvim_del_user_command, 'TypstWatchTmp')
--vim.api.nvim_create_user_command('TypstWatchTmp', function(opts)
--	typst_watch_tmp(opts.args)
--end, { nargs = '?' })
